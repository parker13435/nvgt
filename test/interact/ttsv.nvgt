// NonVisual Gaming Toolkit (NVGT)
// Copyright (C) 2022-2024 Sam Tupy
// License: zlib (see license.md in the root of the NVGT distribution)

void main() {
	tts_voice v;
	string[] voices = v.list_voices();
	int voice = 0;
	show_window("test");
	while (true) {
		wait(5);
		if (key_down(KEY_ESCAPE))
			exit();
		if (key_pressed(KEY_S)) {
			sound s;
			s.load("../data/audio/sonar.ogg");
			s.play_wait();
		}
		if (key_pressed(KEY_UP)) v.speak("up arrow", true);
		if (key_pressed(KEY_DOWN)) v.speak("down arrow", true);
		if (key_pressed(KEY_LEFT)) v.speak("left arrow", true);
		if (key_pressed(KEY_RIGHT)) v.speak("right arrow", true);
		if (key_repeating(KEY_RETURN)) v.speak("I am now speaking a somewhat longer string. I wonder how responsive this will be!", true);
		if (key_pressed(KEY_BACK)) {
			if (keyboard_modifiers & KEYMOD_SHIFT != 0) {
				if (v.set_voice(0)) v.speak_interrupt("Switched to default voice maybe?");
				else screen_reader_speak("cannot switch to default voice", true);
				continue;
			}
			voice += 1;
			if (voice >= voices.length()) voice = 0;
			v.speak_wait("switching to " + voices[voice]);
			if (v.set_voice(voice)) {
				v.rate = 5;
				v.speak_interrupt(voices[voice]);
			} else
				screen_reader_speak(voices[voice] + " failed to load", true);
		}
		if (key_pressed(KEY_A)) {
			v.set_voice(voices.find("Alex"));
			v.speak_interrupt("test");
		}
		key_code[] k = keys_pressed();
		for (uint i = 0; i < k.length(); i++) {
			if (k[i] == KEY_SPACE)
				v.speak_interrupt("this happens to be another string!");
			else
				v.speak_interrupt(k[i]);
		}
	}
}
