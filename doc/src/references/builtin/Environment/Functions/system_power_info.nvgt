/**
	Determine the state of the system's battery.
	system_power_state system_power_info(int&out seconds = void, int&out percent = void);
	## Arguments:
		* int&out seconds = void: Where to store the number of remaining charge time in seconds.
		* int&out percent = void: Where to store the percentage of battery charge remaining.
	## Returns:
		system_power_state: One of POWER_STATE_ERROR, POWER_STATE_UNKNOWN, POWER_STATE_ON_BATTERY, POWER_STATE_NO_BATTERY, POWER_STATE_CHARGING or POWER_STATE_CHARGED.
	## Remarks:
		This could be useful for various reasons, such as backing up game data on low battery or showing extra mercy to online game players who run out of battery power who you might otherwise punish/tag for unlawful disconnection.
		If the battery percentage or time remaining cannot be determined, that value will be set to -1.
		Whether a time or percentage is available is up to the underlying operating system.
*/

// Example:
// Utility function to convert a system_power_state to a string.
string describe_power_state(system_power_state st) {
	switch (st) {
		case POWER_STATE_ERROR: return "error";
		case POWER_STATE_ON_BATTERY: return "on battery";
		case POWER_STATE_NO_BATTERY: return "no battery";
		case POWER_STATE_CHARGING: return "charging";
		case POWER_STATE_CHARGED: return "charged";
		default: return "unknown";
	}
}
void main() {
	system_power_state old_state = system_power_info();
	show_window(describe_power_state(old_state));
	while (!key_pressed(KEY_ESCAPE) and !key_pressed(KEY_AC_BACK)) {
		wait(5);
		int seconds, percent;
		system_power_state st = system_power_info(seconds, percent);
		if (st != old_state) show_window(describe_power_state(st));
		old_state = st;
		if (key_pressed(KEY_SPACE)) {
			string time_str = seconds > -1? " (" + timespan(seconds, 0).format() + ")" : "";
			screen_reader_speak(percent > -1? percent + "%" + time_str : "unable to determine battery percent");
		}
	}
}
