/* rotation.nvgt - functions for moving a rotated character
 * Disclaimer: Though these have been improved over the years and though I do use this myself for Survive the Wild and my other games, it should be understood that I started writing this file in bgt when I was only 12 or 13 years old and it has only been getting improved as needed. The result is that anything from the math to the coding decisions may be less than perfect, putting it kindly. You have been warned!
 *
 * NVGT - NonVisual Gaming Toolkit
 * Copyright (c) 2022-2024 Sam Tupy
 * https://nvgt.gg
 * This software is provided "as-is", without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
 * Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
 * 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
*/

const double pi = 3.1415926535897932384626433832795;
const int north = 0;
const int northeast = 45;
const int east = 90;
const int southeast = 135;
const int south = 180;
const int southwest = 225;
const int west = 270;
const int northwest = 315;
const int half_up = 45;
const int straight_up = 90;
const int half_down = 135;
const int straight_down = 180;
const string[] detailed_rotation_directions = {"north", "north - northeast", "northeast", "east - northeast", "east", "east - southeast", "southeast", "south - southeast", "south", "south - southwest", "southwest", "west - southwest", "west", "west - northwest", "northwest", "north - northwest"};
const string[] rotation_directions = {"north", "northeast", "east", "southeast", "south", "southwest", "west", "northwest"};

shared vector move(double x, double y, double deg, double dir = 0.0) {
	return move(x, y, 0, deg, 0, dir, 0);
}
shared vector move(double x, double y, double z, double deg, double dir) {
	return move(x, y, z, deg, 0, dir, 0);
}
shared vector move(double x, double y, double z, double deg, double zdeg, double dir, double zdir) {
	deg += dir;
	while (deg >= 360)
		deg -= 360;
	if (zdir != 0.0) {
		zdeg += zdir;
		while (zdeg >= 360)
			zdeg -= 360;
	}
	double theta = calculate_theta(deg);
	vector reflection;
	if (deg != 180) reflection.x = sin(theta);
	if (deg != 90 and deg != 270) reflection.y = cos(theta);
	if (zdeg != 90 and zdeg != 270)
		reflection *= cos(calculate_theta(zdeg));
	else
		reflection *= 0;
	if (zdeg != 180) reflection.z = sin(calculate_theta(zdeg));
	vector r(x, y, z);
	r += reflection;
	return r;
}
shared double calculate_theta(double deg) {
	return deg * pi / 180.0;
}
double getdir(double facing) {
	if (facing >= north and facing < northeast)
		return north;
	if (facing >= northeast and facing < east)
		return northeast;
	if (facing >= east and facing < southeast)
		return east;
	if (facing >= southeast and facing < south)
		return southeast;
	if (facing >= south and facing < southwest)
		return south;
	if (facing >= southwest and facing < west)
		return southwest;
	if (facing >= west and facing < northwest)
		return west;
	if (facing >= northwest)
		return northwest;
	return -1;
}
double snapleft(double deg, int direction, double inc = 45) {
	double d = direction - inc;
	if (d < 0)
		d += 360;
	return d;
}
double snapright(double deg, int direction, double inc = 45) {
	double d = direction + inc;
	if (d >= 360)
		d -= 360;
	return d;
}
shared double turnleft(double deg, double inc) {
	deg -= inc;
	while (deg < 0)
		deg += 360;
	return deg;
}
shared double turnright(double deg, double inc) {
	deg += inc;
	while (deg >= 360)
		deg -= 360;
	return deg;
}
shared double degree_limit(double deg) {
	while (deg < 0) deg += 360;
	while (deg > 359) deg -= 360;
	return deg;
}
string dir_to_string(int direction, bool more_detail = true) {
	direction %= 360;
	if (more_detail) {
		double div = direction / 22.5;
		if (div % 2 == 0)
			return detailed_rotation_directions[div];
		else
			return detailed_rotation_directions[(div - div % 2) + 1];
	} else
		return rotation_directions[floor(direction / 45)];
}
shared double get_1d_distance(double x1, double x2) {
	return abs(x1 - x2);
}
shared double get_2d_distance(double x1, double y1, double x2, double y2) {
	double x = get_1d_distance(x1, x2);
	double y = get_1d_distance(y1, y2);
	return sqrt(pow(x, 2.0) + pow(y, 2.0));
}
shared double get_3d_distance(double x1, double y1, double z1, double x2, double y2, double z2) {
	double x = get_1d_distance(x1, x2);
	double y = get_1d_distance(y1, y2);
	double z = get_1d_distance(z1, z2);
	return sqrt(pow(x, 2.0) + pow(y, 2.0) + pow(z, 2.0));
}
shared double get_3d_distance(vector c1, vector c2) {
	return get_3d_distance(c1.x, c1.y, c1.z, c2.x, c2.y, c2.z);
}
shared double get_clamped_3d_distance(vector current, vector min, vector max) {
	double dx = (current.x < min.x) ? (min.x - current.x) : (current.x > max.x) ? (current.x - max.x) : 0;
	double dy = (current.y < min.y) ? (min.y - current.y) : (current.y > max.y) ? (current.y - max.y) : 0;
	double dz = (current.z < min.z) ? (min.z - current.z) : (current.z > max.z) ? (current.z - max.z) : 0;
	return sqrt(dx * dx + dy * dy + dz * dz);
}
shared double get_3d_distance_circle(double x1, double y1, double z1, double x2, double y2, double z2) {
	double x = get_1d_distance(x1, x2);
	double y = get_1d_distance(y1, y2);
	double z = get_1d_distance(z1, z2);
	return x + y + z;
}
shared double get_3d_distance_circle(vector c1, vector c2) {
	return get_3d_distance(c1.x, c1.y, c1.z, c2.x, c2.y, c2.z);
}
shared double calculate_x_y_angle(double x1, double y1, double x2, double y2, double deg, bool at_least_1_tile = true, bool floor_deg = true) {
	if (at_least_1_tile and get_2d_distance(x1, y1, x2, y2) < 1) return 0;
	double x = x2 - x1;
	double y = y2 - y1;
	if (x == 0 and y == 0)
		return 0;
	double rad = atan2(x, y);
	double fdeg = rad * (180.0 / pi);
	fdeg -= deg;
	while (fdeg < 0)
		fdeg += 360;
	if (floor_deg)
		fdeg = floor(fdeg);
	return fdeg;
}
shared double calculate_clamped_x_y_angle(vector current, vector min, vector max, double deg, bool at_least_1_tile = true, bool floor_deg = true) {
	// Clamp current.x to be within the range [min.x, max.x]
	double clamped_x = (current.x < min.x) ? min.x : (current.x > max.x) ? max.x : current.x;
	// Clamp current.y to be within the range [min.y, max.y]
	double clamped_y = (current.y < min.y) ? min.y : (current.y > max.y) ? max.y : current.y;
	// Calculate 2D distance between the current point and the clamped point
	if (at_least_1_tile && get_2d_distance(current.x, current.y, clamped_x, clamped_y) < 1)
		return 0;
	// Calculate x and y differences between current and clamped point
	double x = clamped_x - current.x;
	double y = clamped_y - current.y;
	// Check if thereâ€™s any distance to compute an angle
	if (x == 0 && y == 0)
		return 0;
	// Calculate the angle in radians, convert to degrees, and adjust by `deg`
	double rad = atan2(x, y);
	double fdeg = rad * (180.0 / pi);
	fdeg -= deg;
	// Normalize the angle to be within 0 to 360 degrees
	while (fdeg < 0)
		fdeg += 360;
	// Apply flooring if specified
	if (floor_deg)
		fdeg = floor(fdeg);
	return fdeg;
}
shared string calculate_x_y_string(double deg) {
	if (deg == 0 or deg == 360)
		return "straight in front";
	else if (deg > 0 and deg < 10)
		return "in front and very slightly to the right";
	else if (deg > 9 and deg < 20)
		return "in front and slightly off to the right";
	else if (deg > 19 and deg < 40)
		return "in front a little ways off to the right";
	else if (deg > 39 and deg < 90)
		return "slightly in front and a fair distance off to the right";
	else if (deg == 90)
		return "straight off to the right";
	else if (deg > 90 and deg < 120)
		return "slightly behind and far off to the right";
	else if (deg > 119 and deg < 150)
		return "behind and a little ways off to the right";
	else if (deg > 149 and deg < 170)
		return "behind and slightly to the right";
	else if (deg > 169 and deg < 180)
		return "behind and very slightly to the right";
	else if (deg == 180)
		return "straight behind";
	else if (deg > 180 and deg < 190)
		return "behind and very slightly to the left";
	else if (deg > 189 and deg < 200)
		return "behind and slightly to the left";
	else if (deg > 199 and deg < 220)
		return "behind and a little ways off to the left";
	else if (deg > 219 and deg < 240)
		return "behind and a fair distance off to the left";
	else if (deg > 239 and deg < 270)
		return "slightly behind and far off to the left";
	else if (deg == 270)
		return "straight off to the left";
	else if (deg > 270 and deg < 300)
		return "slightly in front far off to the left";
	else if (deg > 299 and deg < 320)
		return "in front and a ways off to the left";
	else if (deg > 319 and deg < 340)
		return "in front and a little ways off to the left";
	else if (deg > 339 and deg < 350)
		return "in front and slightly off to the left";
	else if (deg > 349 and deg < 360)
		return "in front and very slightly off to the left";
	return "";
}
string calculate_x_y_string3d(double deg, double z1, double z2) {
	if (z1 > z2)
		return "below, " + calculate_x_y_string(deg);
	else if (z1 < z2)
		return "above, " + calculate_x_y_string(deg);
	else
		return calculate_x_y_string(deg);
}
