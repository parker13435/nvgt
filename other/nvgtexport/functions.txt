"bool array<T>::less(const T&in, const T&in)"
"bool coordinate_map_filter_callback(coordinate_map_area@)"
"int pathfinder_callback(int, int, int, any@ = null)"
"void sound_close_callback(string)"
"uint sound_length_callback(string)"
"int sound_read_callback(string&out, uint, string)"
"bool sound_seek_callback(uint, string)"
"void thread_callback(dictionary@)"
"uint timer_callback(string, string)"
"void coroutine(dictionary@)"
"int git_repository_match_callback(git_repository@, const string&in, const string&in)"
"int sqlite3authorizer(string, int, string, string, string, string)"
"string format_int(int64, const string&in = \"\", uint = 0)"
"string format_uint(uint64, const string&in = \"\", uint = 0)"
"string format_float(double, const string&in = \"\", uint = 0, uint = 0)"
"int64 parse_int(const string&in, uint = 10, uint&out = 0)"
"uint64 parseUInt(const string&in, uint = 10, uint&out = 0)"
"string join(const array<string>&in, const string&in)"
"float fp_from_IEEE(uint)"
"uint fp_to_IEEE(float)"
"double fpFromIEEE(uint64)"
"uint64 fpToIEEE(double)"
"bool close_to(float, float, float = 0.00001f)"
"bool close_to(double, double, double = 0.0000000001)"
"float cos(float)"
"float sin(float)"
"float tan(float)"
"float acos(float)"
"float asin(float)"
"float atan(float)"
"float atan2(float, float)"
"float cosh(float)"
"float sinh(float)"
"float tanh(float)"
"float log(float)"
"float log10(float)"
"float pow(float, float)"
"float sqrt(float)"
"float ceil(float)"
"float abs(float)"
"float floor(float)"
"float fraction(float)"
"void print(const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null)"
"void println(const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null)"
"void printf(const string&in, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null, const ?&in = null)"
"void throw(const string&in)"
"string get_exception_info()"
"int get_exception_line()"
"string get_exception_function()"
"string get_exception_file()"
"string string_deflate(const string&in, int = 9)"
"string string_inflate(const string&in)"
"string string_aes_encrypt(const string&in, string)"
"string string_aes_decrypt(const string&in, string)"
"string random_bytes(uint)"
"datastream@ get_cin() property"
"datastream@ get_cout() property"
"datastream@ get_cerr() property"
"string string_hash_md5(const string&in, bool = false)"
"string string_hash_sha1(const string&in, bool = false)"
"string string_hash_sha224(const string&in, bool = false)"
"string string_hash_sha256(const string&in, bool = false)"
"string string_hash_sha384(const string&in, bool = false)"
"string string_hash_sha512(const string&in, bool = false)"
"uint crc32(const string&in)"
"uint HOTP(const string&in, uint64, uint = 6)"
"bool key_pressed(uint)"
"bool key_repeating(uint)"
"bool key_down(uint)"
"bool key_released(uint)"
"bool key_up(uint)"
"bool insure_key_up(uint)"
"bool simulate_key_down(uint)"
"bool simulate_key_up(uint)"
"array<key_code>@ keys_pressed()"
"array<key_code>@ keys_down()"
"uint total_keys_down()"
"array<key_code>@ keys_released()"
"key_modifier get_keyboard_modifiers() property"
"void set_keyboard_modifiers(key_modifier) property"
"void reset_keyboard()"
"bool mouse_pressed(uint8)"
"bool mouse_down(uint8)"
"bool mouse_released(uint8)"
"bool mouse_up(uint8)"
"void mouse_update()"
"string get_characters()"
"bool install_keyhook(bool = true)"
"void uninstall_keyhook()"
"array<uint64>@ get_touch_devices()"
"string get_touch_device_name(uint64)"
"touch_device_type get_touch_device_type(uint64)"
"array<touch_finger>@ query_touch_device(uint64 = 0)"
"string http_status_reason(http_status)"
"string url_encode(const string&in, const string&in = \"\")"
"string url_decode(const string&in, bool = true)"
"string url_request(const string&in, const string&in, const string&in = \"\", http_response&out = void)"
"string url_get(const string&in, http_response&out = void)"
"string url_post(const string&in, const string&in, http_response&out = void)"
"string string_create_from_pointer(uint64, uint64)"
"vector rotate(const vector&in, const vector&in, double, bool = true)"
"bool boxes_intersect(float, float, float, float, float, float, float, float, float, float)"
"bool chdir(const string&in)"
"uint8 character_to_ascii(const string&in)"
"string ascii_to_character(uint8)"
"string string_base32_normalize(const string&in)"
"uint64 get_TIME_STAMP() property"
"array<string>@ get_preferred_locales()"
"string get_COMMAND_LINE() property"
"bool run(const string&in, const string&in, bool, bool)"
"bool is_debugger_present()"
"int get_last_error()"
"double round(double, int)"
"double tinyexpr(const string&in)"
"string number_to_words(int64, bool = true)"
"uint string_distance(const string&in, const string&in, uint = 1, uint = 1, uint = 1)"
"string float_to_bytes(float)"
"float bytes_to_float(const string&in)"
"string double_to_bytes(double)"
"double bytes_to_double(const string&in)"
"bool natural_number_sort(const string&in, const string&in)"
"int utf8prev(const string&in, int)"
"int utf8next(const string&in, int)"
"int utf8size(const string&in)"
"uint64 memory_allocate(uint64)"
"uint64 memory_allocate_units(uint64, uint64)"
"uint64 memory_reallocate(uint64, uint64)"
"void memory_free(uint64)"
"float parse_float(const string&in)"
"double parse_double(const string&in)"
"bool get_SCREEN_READER_AVAILABLE() property"
"string screen_reader_detect()"
"bool screen_reader_has_speech()"
"bool screen_reader_has_braille()"
"bool screen_reader_is_speaking()"
"bool screen_reader_output(const string&in, bool = true)"
"bool screen_reader_speak(const string&in, bool = true)"
"bool screen_reader_braille(const string&in)"
"bool screen_reader_silence()"
"bool pack_set_global_identifier(const string&in)"
"var@ parse_json(const string&in)"
"var@ parse_json(datastream@)"
"string string_to_hex(const string&in)"
"string hex_to_string(const string&in)"
"string string_base64_encode(const string&in, string_base64_options = STRING_BASE64_DEFAULT)"
"string string_base64_decode(const string&in, string_base64_options = STRING_BASE64_PADLESS)"
"string string_base32_encode(const string&in)"
"string string_base32_decode(const string&in)"
"string string_recode(const string&in, const string&in, const string&in, int&out = void)"
"void c_debug_message(const string&in)"
"void c_debug_break()"
"void c_debug_break(const string&in)"
"string get_DIRECTORY_HOME() property"
"string get_DIRECTORY_APPDATA() property"
"string get_DIRECTORY_COMMON_APPDATA() property"
"string get_DIRECTORY_LOCAL_APPDATA() property"
"string get_DIRECTORY_TEMP() property"
"bool environment_variable_exists(const string&in)"
"string expand_environment_variables(const string&in)"
"string read_environment_variable(const string&in, const string&in = \"\")"
"void write_environment_variable(const string&in, const string&in)"
"OPERATING_SYSTEM get_OS() property"
"ARCHITECTURE get_PROCESSOR_ARCHITECTURE() property"
"uint get_PROCESSOR_COUNT() property"
"string get_system_node_name() property"
"string get_system_node_id() property"
"bool get_system_is_unix() property"
"bool get_system_is_windows() property"
"string cwdir()"
"bool regexp_match(const string&in, const string&in, int = RE_UTF8)"
"bool regexp_search(const string&in, const string&in, int = RE_UTF8)"
"string regexp_replace(const string&in, const string&in, const string&in, int = RE_UTF8)"
"bool random_set_state(const string&in)"
"string random_get_state()"
"uint random_seed()"
"uint64 random_seed64()"
"int random(int, int)"
"bool random_bool(int = 50)"
"string random_character(const string&in, const string&in)"
"int get_garbage_collect_mode() property"
"void set_garbage_collect_mode(int) property"
"int get_garbage_collect_auto_frequency() property"
"void set_garbage_collect_auto_frequency(int) property"
"void garbage_collect(bool = true)"
"void start_profiling()"
"void stop_profiling()"
"void reset_profiler()"
"string generate_profile(bool = true)"
"string get_call_stack()"
"int get_call_stack_size()"
"string get_SCRIPT_CURRENT_FUNCTION() property"
"string get_SCRIPT_CURRENT_FILE() property"
"int get_SCRIPT_CURRENT_LINE() property"
"void assert(bool, const string&in = \"\")"
"string get_SCRIPT_EXECUTABLE() property"
"bool get_SCRIPT_COMPILED() property"
"string get_function_signature(?&in)"
"void acquire_exclusive_lock()"
"void release_exclusive_lock()"
"void acquire_shared_lock()"
"void release_shared_lock()"
"void script_dump_engine_configuration(datastream@)"
"script_module@ script_get_module(const string&in, int = 1)"
"dictionary@ deserialize(const string&in)"
"string packet(const ?&in)"
"string packet(const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"string packet(const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in, const ?&in)"
"bool get_SOUND_AVAILABLE() property"
"float get_sound_master_volume() property"
"void set_sound_master_volume(float) property"
"uint get_sound_input_device() property"
"void set_sound_input_device(uint) property"
"uint get_sound_input_device_count() property"
"array<string>@ get_sound_input_devices() property"
"uint get_sound_output_device() property"
"void set_sound_output_device(uint) property"
"uint get_sound_output_device_count() property"
"array<string>@ get_sound_output_devices() property"
"bool get_sound_global_hrtf() property"
"void set_sound_global_hrtf(bool) property"
"string generate_system_fingerprint(const string&in = )"
"string generate_system_fingerprint_legacy1(const string&in = )"
"void exit(int = 0)"
"uint thread_current_id()"
"void thread_yield()"
"bool thread_sleep(uint)"
"thread@ get_thread_current() property"
"thread_pool& get_thread_pool_default() property"
"int get_DATE_YEAR() property"
"int get_DATE_MONTH() property"
"string get_DATE_MONTH_NAME() property"
"int get_DATE_DAY() property"
"int get_DATE_WEEKDAY() property"
"string get_DATE_WEEKDAY_NAME() property"
"int get_TIME_HOUR() property"
"int get_TIME_MINUTE() property"
"int get_TIME_SECOND() property"
"uint64 ticks(bool = false)"
"uint64 secure_ticks()"
"uint64 microticks(bool = false)"
"uint64 nanoticks()"
"uint64 get_SYSTEM_PERFORMANCE_COUNTER() property"
"uint64 get_SYSTEM_PERFORMANCE_FREQUENCY() property"
"void nanosleep(uint64)"
"uint64 get_TIME_SYSTEM_RUNNING_MILLISECONDS() property"
"int get_TIMEZONE_BASE_OFFSET() property"
"int get_TIMEZONE_DST_OFFSET() property"
"int get_TIMEZONE_OFFSET() property"
"string get_TIMEZONE_NAME() property"
"string get_TIMEZONE_STANDARD_NAME() property"
"string get_TIMEZONE_DST_NAME() property"
"timestamp timestamp_from_UTC_time(int64)"
"bool datetime_is_leap_year(int)"
"int datetime_days_of_month(int, int)"
"bool datetime_is_valid(int, int, int, int = 0, int = 0, int = 0, int = 0, int = 0)"
"datetime parse_datetime(const string&in, const string&in, int&inout)"
"datetime parse_datetime(const string&in, int&inout)"
"bool datetime_is_valid_format_string(const string&in)"
"bool datetime_is_valid_format(const string&in)"
"bool directory_exists(const string&in)"
"bool directory_create(const string&in)"
"bool directory_delete(const string&in, bool = true)"
"bool file_exists(const string&in)"
"bool file_delete(const string&in)"
"bool file_copy(const string&in, const string&in, bool)"
"bool file_hard_link(const string&in, const string&in)"
"bool file_move(const string&in, const string&in)"
"array<string>@ find_directories(const string&in)"
"array<string>@ find_files(const string&in)"
"array<string>@ glob(const string&in, glob_options = GLOB_DEFAULT)"
"int64 file_get_size(const string&in)"
"timestamp file_get_date_created(const string&in)"
"timestamp file_get_date_modified(const string&in)"
"bool fnmatch(const string&in, const string&in)"
"int message_box(const string&in, const string&in, array<string>@, uint = 0)"
"int alert(const string&in, const string&in, bool = false, uint = 0)"
"int question(const string&in, const string&in, bool = false, uint = 0)"
"string clipboard_get_text()"
"bool clipboard_set_text(const string&in)"
"bool clipboard_set_raw_text(const string&in)"
"string open_file_dialog(const string&in = \"\", const string&in = \"\")"
"string save_file_dialog(const string&in = \"\", const string&in = \"\")"
"string select_folder_dialog(const string&in = \"\")"
"bool urlopen(const string&in)"
"string input_box(const string&in, const string&in, const string&in = '', uint64 = 0)"
"bool info_box(const string&in, const string&in, const string&in, uint64 = 0)"
"void next_keyboard_layout()"
"bool set_application_name(const string&in)"
"bool show_window(const string&in)"
"bool destroy_window()"
"bool hide_window()"
"bool focus_window()"
"bool is_window_active()"
"bool is_window_hidden()"
"string get_window_text()"
"uint64 get_window_os_handle()"
"void refresh_window()"
"void wait(int)"
"uint64 idle_ticks()"
"bool is_console_available()"
"void debug_break()"
"void debug_add_file_breakpoint(const string&in, int)"
"void debug_add_func_breakpoint(const string&in)"
"void sleep(uint)"
"void yield()"
"void create_coroutine(coroutine@, dictionary@)"
"string curl_url_encode(const string&in)"
"string curl_url_decode(const string&in)"
"int git_last_error_class()"
"string git_last_error_text()"